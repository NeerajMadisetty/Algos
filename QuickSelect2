class Solution {
    public int findKthLargest(int[] nums, int k) {

        return quickSelect(nums,nums.length-k+1,0,nums.length-1);
    }

    int quickSelect(int[] nums, int k, int start, int end){
        int pivotIndex = partition(nums,start, end);
        if(pivotIndex == k-1) return nums[pivotIndex];
        else if(pivotIndex < k-1){
            return quickSelect(nums,k,pivotIndex+1,end);
        } else{
            return quickSelect(nums,k,start,pivotIndex-1);
        }
    }

    int partition(int[] nums, int start, int end){

        int pivot = nums[end];
        int a = start;
        int i = start;
        while(i <= end){
            if(nums[i] < pivot){
                int temp = nums[a];
                nums[a] = nums[i];
                nums[i] = temp;
                a++;
            }
            i++;
        }
        int temp = nums[end];
        nums[end] = nums[a];
        nums[a] = temp;
        return a;
  
