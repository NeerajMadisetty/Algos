class Solution {
    public int search(int[] nums, int target) {
        
        int pivot = findPivot(nums);
        int result = 0;
        if(pivot==0){
            result = findTarget(nums,0,nums.length-1,target);
        }
        else if(target > nums[nums.length-1]){
            result = findTarget(nums,0,pivot-1,target);
        }else{
            result = findTarget(nums,pivot,nums.length-1,target);
        }
        return result;
    }
    
    public int findPivot(int[] nums){
        
        if(nums.length == 1) return 0;
        
        int low = 0;
        int high = nums.length-1;
        
        while(low<=high){
            int mid = (low+high)/2;
            int left=0,right=0;
            if(mid==0){
                if(nums[low] > nums[high]) return high;
                else return low;
            }else if(mid == nums.length-1){
                return nums.length-1;
            }else{
                left = nums[mid-1];
                right = nums[mid+1];
            }
            
            if(left > nums[mid]) return mid;
            else if(nums[mid] > right) return mid+1;
            
            if(nums[mid] > nums[high]){
                low = mid;
            }else{
                high = mid;
            }
        }
        
        return 0;
    }
    
    public int findTarget(int[] nums,int low, int high, int target){
        
        int mid=0;
        
        if(low==high){
            if(nums[low] == target) return low;
            else return -1;
        }
        
        while(low<=high){
            mid = (low+high)/2;
            
            if(target == nums[mid]) return mid;
            
            if(low == mid){
                if(nums[mid+1] == target) return mid+1;
                else return -1;
            }
            
            if(target == nums[mid-1]) return mid-1;
            else if(target == nums[mid+1]) return mid+1;
            else if(target > nums[mid-1] && target < nums[mid+1]) return -1;
            
            if(target < nums[mid]){
                high = mid;
            }else{
                low = mid;
            }
        }
        
        return 0;
  
