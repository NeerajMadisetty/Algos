class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {

        ArrayList<ArrayList<int[]>> edges = new ArrayList<>();

        for(int i=0; i<n; i++){
            edges.add(new ArrayList<>());
        }

        for(int i=0; i<times.length; i++){
            int u = times[i][0];
            int v = times[i][1];
            int w = times[i][2];
            edges.get(u-1).add(new int[]{v-1,w});
        }

        int[] dist = new int[n];
        boolean[] visited = new boolean[n];

        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[k-1] = 0;

        int count = 0;
        int result = -1;

        while(count < n){
            int min_index = findMin(dist,visited);
            if(min_index == -1) return -1;
            ArrayList<int[]> currEdges = edges.get(min_index);
            for(int[] pair: currEdges){
                int v = pair[0];
                int w = pair[1];
                if(dist[v] > dist[min_index] + w){
                    dist[v] = dist[min_index] + w;
                }
            }
            visited[min_index] = true;
            result = dist[min_index];
            count++;
        }

        return result;
    }

    int findMin(int[] dist, boolean[] visited){
        int min = Integer.MAX_VALUE;
        int min_index = -1;
        for(int i=0; i<dist.length; i++){
            if(dist[i] < min && visited[i] == false){
                min = dist[i];
                min_index = i;
            }
        }
        return min_index;
    }
}
